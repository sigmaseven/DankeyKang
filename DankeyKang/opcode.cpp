#include "opcode.h"

// Yep, it's ugly, but it works.
uint8_t Opcode::GetWidth(uint8_t byte)
{
	switch (byte)
	{
	case ASL_ACCUMULATOR:
	case BRK:
	case CLC:
	case CLD:
	case CLI:
	case CLV:
	case DEX:
	case DEY:
	case INX:
	case INY:
	case LSR_ACCUMULATOR:
	case NOP:
	case PHA:
	case PHP:
	case PLA:
	case PLP:
	case ROL_ACCUMULATOR:
	case ROR_ACCUMULATOR:
	case RTI:
	case RTS:
	case SEC:
	case SED:
	case SEI:
	case TAX:
	case TAY:
	case TSX:
	case TXA:
	case TXS:
	case TYA:
		return (uint8_t)1;

	case ADC_IMMEDIATE:
	case ADC_ZERO_PAGE:
	case ADC_ZERO_PAGE_X:
	case ADC_INDIRECT_X:
	case ADC_INDIRECT_Y:
	case AND_IMMEDIATE:
	case AND_ZERO_PAGE:
	case AND_ZERO_PAGE_X:
	case AND_INDIRECT_X:
	case AND_INDIRECT_Y:
	case ASL_ZERO_PAGE:
	case ASL_ZERO_PAGE_X:
	case BCC:
	case BCS:
	case BEQ:
	case BIT_ZERO_PAGE:
	case BMI:
	case BNE:
	case BPL:
	case BVC:
	case BVS:
	case CMP_IMMEDIATE:
	case CMP_ZERO_PAGE:
	case CMP_ZERO_PAGE_X:
	case CMP_INDIRECT_X:
	case CMP_INDIRECT_Y:
	case CPX_IMMEDIATE:
	case CPX_ZERO_PAGE:
	case CPY_IMMEDIATE:
	case CPY_ZERO_PAGE:
	case DEC_ZERO_PAGE:
	case DEC_ZERO_PAGE_X:
	case EOR_IMMEDIATE:
	case EOR_ZERO_PAGE:
	case EOR_ZERO_PAGE_X:
	case EOR_INDIRECT_X:
	case EOR_INDIRECT_Y:
	case INC_ZERO_PAGE:
	case INC_ZERO_PAGE_X:
	case LDA_IMMEDIATE:
	case LDA_ZERO_PAGE:
	case LDA_ZERO_PAGE_X:
	case LDA_INDIRECT_X:
	case LDA_INDIRECT_Y:
	case LDX_IMMEDIATE:
	case LDX_ZERO_PAGE:
	case LDX_ZERO_PAGE_Y:
	case LDY_IMMEDIATE:
	case LDY_ZERO_PAGE:
	case LDY_ZERO_PAGE_X:
	case LSR_ZERO_PAGE:
	case LSR_ZERO_PAGE_X:
	case ORA_IMMEDIATE:
	case ORA_ZERO_PAGE:
	case ORA_ZERO_PAGE_X:
	case ORA_INDIRECT_X:
	case ORA_INDIRECT_Y:
	case ROL_ZERO_PAGE:
	case ROL_ZERO_PAGE_X:
	case ROR_ZERO_PAGE:
	case ROR_ZERO_PAGE_X:
	case SBC_IMMEDIATE:
	case SBC_ZERO_PAGE:
	case SBC_ZERO_PAGE_X:
	case SBC_INDIRECT_X:
	case SBC_INDIRECT_Y:
	case STA_ZERO_PAGE:
	case STA_ZERO_PAGE_X:
	case STA_INDIRECT_X:
	case STA_INDIRECT_Y:
	case STX_ZERO_PAGE:
	case STX_ZERO_PAGE_Y:
	case STY_ZERO_PAGE:
	case STY_ZERO_PAGE_X:
		return (uint8_t)2;

	case ADC_ABSOLUTE:
	case ADC_ABSOLUTE_X:
	case ADC_ABSOLUTE_Y:
	case AND_ABSOLUTE:
	case AND_ABSOLUTE_X:
	case AND_ABSOLUTE_Y:
	case ASL_ABSOLUTE:
	case ASL_ABSOLUTE_X:
	case BIT_ABSOLUTE:
	case CMP_ABSOLUTE:
	case CMP_ABSOLUTE_X:
	case CMP_ABSOLUTE_Y:
	case CPX_ABSOLUTE:
	case CPY_ABSOLUTE:
	case DEC_ABSOLUTE:
	case DEC_ABSOLUTE_X:
	case EOR_ABSOLUTE:
	case EOR_ABSOLUTE_X:
	case EOR_ABSOLUTE_Y:
	case INC_ABSOLUTE:
	case INC_ABSOLUTE_X:
	case JMP_ABSOLUTE:
	case JMP_INDIRECT:
	case JSR_ABSOLUTE:
	case LDA_ABSOLUTE:
	case LDA_ABSOLUTE_X:
	case LDA_ABSOLUTE_Y:
	case LDX_ABSOLUTE:
	case LDX_ABSOLUTE_Y:
	case LDY_ABSOLUTE:
	case LDY_ABSOLUTE_X:
	case LSR_ABSOLUTE:
	case LSR_ABSOLUTE_X:
	case ORA_ABSOLUTE:
	case ORA_ABSOLUTE_X:
	case ORA_ABSOLUTE_Y:
	case ROL_ABSOLUTE:
	case ROL_ABSOLUTE_X:
	case ROR_ABSOLUTE:
	case ROR_ABSOLUTE_X:
	case SBC_ABSOLUTE:
	case SBC_ABSOLUTE_X:
	case SBC_ABSOLUTE_Y:
	case STA_ABSOLUTE:
	case STA_ABSOLUTE_X:
	case STA_ABSOLUTE_Y:
	case STX_ABSOLUTE:
	case STY_ABSOLUTE:
		return (uint8_t)3;

	// return 0 on failure
	default:
		return (uint8_t)0;
	}
}